// Generated by view binder compiler. Do not edit!
package com.example.recycle.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.recycle.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class GridLayoutBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final EditText answerEditText;

  @NonNull
  public final Button button0;

  @NonNull
  public final Button button1;

  @NonNull
  public final Button button2;

  @NonNull
  public final Button button3;

  @NonNull
  public final Button button4;

  @NonNull
  public final Button button5;

  @NonNull
  public final Button button6;

  @NonNull
  public final Button button7;

  @NonNull
  public final Button button8;

  @NonNull
  public final Button button9;

  @NonNull
  public final Button buttonClear;

  @NonNull
  public final Button buttonDeduct;

  @NonNull
  public final Button buttonDelete;

  @NonNull
  public final Button buttonDivide;

  @NonNull
  public final Button buttonDot;

  @NonNull
  public final Button buttonEqual;

  @NonNull
  public final Button buttonMutiply;

  @NonNull
  public final Button buttonPlus;

  @NonNull
  public final Button buttonPosNeg;

  @NonNull
  public final Button buttonSplitDate;

  @NonNull
  public final TextView hintEditText;

  @NonNull
  public final Button localDate;

  @NonNull
  public final LinearLayout main1;

  @NonNull
  public final MaterialButton modelSelectDate;

  @NonNull
  public final MaterialButton modelSelectDay;

  @NonNull
  public final MaterialButton modelSelectMonth;

  @NonNull
  public final MaterialButton modelSelectWeek;

  @NonNull
  public final MaterialButton modelSelectYear;

  @NonNull
  public final MaterialButtonToggleGroup selecToggleGroup;

  private GridLayoutBinding(@NonNull FrameLayout rootView, @NonNull EditText answerEditText,
      @NonNull Button button0, @NonNull Button button1, @NonNull Button button2,
      @NonNull Button button3, @NonNull Button button4, @NonNull Button button5,
      @NonNull Button button6, @NonNull Button button7, @NonNull Button button8,
      @NonNull Button button9, @NonNull Button buttonClear, @NonNull Button buttonDeduct,
      @NonNull Button buttonDelete, @NonNull Button buttonDivide, @NonNull Button buttonDot,
      @NonNull Button buttonEqual, @NonNull Button buttonMutiply, @NonNull Button buttonPlus,
      @NonNull Button buttonPosNeg, @NonNull Button buttonSplitDate, @NonNull TextView hintEditText,
      @NonNull Button localDate, @NonNull LinearLayout main1,
      @NonNull MaterialButton modelSelectDate, @NonNull MaterialButton modelSelectDay,
      @NonNull MaterialButton modelSelectMonth, @NonNull MaterialButton modelSelectWeek,
      @NonNull MaterialButton modelSelectYear,
      @NonNull MaterialButtonToggleGroup selecToggleGroup) {
    this.rootView = rootView;
    this.answerEditText = answerEditText;
    this.button0 = button0;
    this.button1 = button1;
    this.button2 = button2;
    this.button3 = button3;
    this.button4 = button4;
    this.button5 = button5;
    this.button6 = button6;
    this.button7 = button7;
    this.button8 = button8;
    this.button9 = button9;
    this.buttonClear = buttonClear;
    this.buttonDeduct = buttonDeduct;
    this.buttonDelete = buttonDelete;
    this.buttonDivide = buttonDivide;
    this.buttonDot = buttonDot;
    this.buttonEqual = buttonEqual;
    this.buttonMutiply = buttonMutiply;
    this.buttonPlus = buttonPlus;
    this.buttonPosNeg = buttonPosNeg;
    this.buttonSplitDate = buttonSplitDate;
    this.hintEditText = hintEditText;
    this.localDate = localDate;
    this.main1 = main1;
    this.modelSelectDate = modelSelectDate;
    this.modelSelectDay = modelSelectDay;
    this.modelSelectMonth = modelSelectMonth;
    this.modelSelectWeek = modelSelectWeek;
    this.modelSelectYear = modelSelectYear;
    this.selecToggleGroup = selecToggleGroup;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static GridLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static GridLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.grid_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static GridLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.answerEditText;
      EditText answerEditText = ViewBindings.findChildViewById(rootView, id);
      if (answerEditText == null) {
        break missingId;
      }

      id = R.id.button0;
      Button button0 = ViewBindings.findChildViewById(rootView, id);
      if (button0 == null) {
        break missingId;
      }

      id = R.id.button1;
      Button button1 = ViewBindings.findChildViewById(rootView, id);
      if (button1 == null) {
        break missingId;
      }

      id = R.id.button2;
      Button button2 = ViewBindings.findChildViewById(rootView, id);
      if (button2 == null) {
        break missingId;
      }

      id = R.id.button3;
      Button button3 = ViewBindings.findChildViewById(rootView, id);
      if (button3 == null) {
        break missingId;
      }

      id = R.id.button4;
      Button button4 = ViewBindings.findChildViewById(rootView, id);
      if (button4 == null) {
        break missingId;
      }

      id = R.id.button5;
      Button button5 = ViewBindings.findChildViewById(rootView, id);
      if (button5 == null) {
        break missingId;
      }

      id = R.id.button6;
      Button button6 = ViewBindings.findChildViewById(rootView, id);
      if (button6 == null) {
        break missingId;
      }

      id = R.id.button7;
      Button button7 = ViewBindings.findChildViewById(rootView, id);
      if (button7 == null) {
        break missingId;
      }

      id = R.id.button8;
      Button button8 = ViewBindings.findChildViewById(rootView, id);
      if (button8 == null) {
        break missingId;
      }

      id = R.id.button9;
      Button button9 = ViewBindings.findChildViewById(rootView, id);
      if (button9 == null) {
        break missingId;
      }

      id = R.id.buttonClear;
      Button buttonClear = ViewBindings.findChildViewById(rootView, id);
      if (buttonClear == null) {
        break missingId;
      }

      id = R.id.buttonDeduct;
      Button buttonDeduct = ViewBindings.findChildViewById(rootView, id);
      if (buttonDeduct == null) {
        break missingId;
      }

      id = R.id.buttonDelete;
      Button buttonDelete = ViewBindings.findChildViewById(rootView, id);
      if (buttonDelete == null) {
        break missingId;
      }

      id = R.id.buttonDivide;
      Button buttonDivide = ViewBindings.findChildViewById(rootView, id);
      if (buttonDivide == null) {
        break missingId;
      }

      id = R.id.buttonDot;
      Button buttonDot = ViewBindings.findChildViewById(rootView, id);
      if (buttonDot == null) {
        break missingId;
      }

      id = R.id.buttonEqual;
      Button buttonEqual = ViewBindings.findChildViewById(rootView, id);
      if (buttonEqual == null) {
        break missingId;
      }

      id = R.id.buttonMutiply;
      Button buttonMutiply = ViewBindings.findChildViewById(rootView, id);
      if (buttonMutiply == null) {
        break missingId;
      }

      id = R.id.buttonPlus;
      Button buttonPlus = ViewBindings.findChildViewById(rootView, id);
      if (buttonPlus == null) {
        break missingId;
      }

      id = R.id.buttonPosNeg;
      Button buttonPosNeg = ViewBindings.findChildViewById(rootView, id);
      if (buttonPosNeg == null) {
        break missingId;
      }

      id = R.id.buttonSplitDate;
      Button buttonSplitDate = ViewBindings.findChildViewById(rootView, id);
      if (buttonSplitDate == null) {
        break missingId;
      }

      id = R.id.hintEditText;
      TextView hintEditText = ViewBindings.findChildViewById(rootView, id);
      if (hintEditText == null) {
        break missingId;
      }

      id = R.id.localDate;
      Button localDate = ViewBindings.findChildViewById(rootView, id);
      if (localDate == null) {
        break missingId;
      }

      id = R.id.main1;
      LinearLayout main1 = ViewBindings.findChildViewById(rootView, id);
      if (main1 == null) {
        break missingId;
      }

      id = R.id.modelSelect_date;
      MaterialButton modelSelectDate = ViewBindings.findChildViewById(rootView, id);
      if (modelSelectDate == null) {
        break missingId;
      }

      id = R.id.modelSelect_day;
      MaterialButton modelSelectDay = ViewBindings.findChildViewById(rootView, id);
      if (modelSelectDay == null) {
        break missingId;
      }

      id = R.id.modelSelect_month;
      MaterialButton modelSelectMonth = ViewBindings.findChildViewById(rootView, id);
      if (modelSelectMonth == null) {
        break missingId;
      }

      id = R.id.modelSelect_week;
      MaterialButton modelSelectWeek = ViewBindings.findChildViewById(rootView, id);
      if (modelSelectWeek == null) {
        break missingId;
      }

      id = R.id.modelSelect_year;
      MaterialButton modelSelectYear = ViewBindings.findChildViewById(rootView, id);
      if (modelSelectYear == null) {
        break missingId;
      }

      id = R.id.selecToggleGroup;
      MaterialButtonToggleGroup selecToggleGroup = ViewBindings.findChildViewById(rootView, id);
      if (selecToggleGroup == null) {
        break missingId;
      }

      return new GridLayoutBinding((FrameLayout) rootView, answerEditText, button0, button1,
          button2, button3, button4, button5, button6, button7, button8, button9, buttonClear,
          buttonDeduct, buttonDelete, buttonDivide, buttonDot, buttonEqual, buttonMutiply,
          buttonPlus, buttonPosNeg, buttonSplitDate, hintEditText, localDate, main1,
          modelSelectDate, modelSelectDay, modelSelectMonth, modelSelectWeek, modelSelectYear,
          selecToggleGroup);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
